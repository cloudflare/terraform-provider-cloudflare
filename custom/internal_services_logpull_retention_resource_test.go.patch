diff --git a/internal/services/logpull_retention/resource_test.go b/internal/services/logpull_retention/resource_test.go
new file mode 100644
index 000000000..93d32685c
--- /dev/null
+++ b/internal/services/logpull_retention/resource_test.go
@@ -0,0 +1,42 @@
+package logpull_retention_test
+
+import (
+	"os"
+	"testing"
+
+	"github.com/cloudflare/terraform-provider-cloudflare/internal/acctest"
+	"github.com/cloudflare/terraform-provider-cloudflare/internal/consts"
+	"github.com/cloudflare/terraform-provider-cloudflare/internal/utils"
+	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
+)
+
+func TestAccLogpullRetentionSetStatus(t *testing.T) {
+	// Temporarily unset CLOUDFLARE_API_TOKEN if it is set as the Logpull
+	// service is throwing authentication errors despite it being marked as
+	// available.
+	if os.Getenv("CLOUDFLARE_API_TOKEN") != "" {
+		t.Setenv("CLOUDFLARE_API_TOKEN", "")
+	}
+
+	rnd := utils.GenerateRandomResourceName()
+	name := "cloudflare_logpull_retention." + rnd
+	zoneID := os.Getenv("CLOUDFLARE_ZONE_ID")
+
+	resource.Test(t, resource.TestCase{
+		PreCheck:                 func() { acctest.TestAccPreCheck(t) },
+		ProtoV6ProviderFactories: acctest.TestAccProtoV6ProviderFactories,
+		Steps: []resource.TestStep{
+			{
+				Config: testLogpullRetentionSetConfig(rnd, zoneID, "false"),
+				Check: resource.ComposeTestCheckFunc(
+					resource.TestCheckResourceAttr(name, consts.ZoneIDSchemaKey, zoneID),
+					resource.TestCheckResourceAttr(name, "flag", "false"),
+				),
+			},
+		},
+	})
+}
+
+func testLogpullRetentionSetConfig(id, zoneID, enabled string) string {
+	return acctest.LoadTestCase("logpullretentionsetconfig.tf", id, zoneID, enabled)
+}
