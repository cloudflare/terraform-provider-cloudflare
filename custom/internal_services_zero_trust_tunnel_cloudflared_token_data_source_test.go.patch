diff --git a/internal/services/zero_trust_tunnel_cloudflared_token/data_source_test.go b/internal/services/zero_trust_tunnel_cloudflared_token/data_source_test.go
new file mode 100644
index 000000000..91d592f37
--- /dev/null
+++ b/internal/services/zero_trust_tunnel_cloudflared_token/data_source_test.go
@@ -0,0 +1,40 @@
+package zero_trust_tunnel_cloudflared_token_test
+
+import (
+	"fmt"
+	"os"
+	"testing"
+
+	"github.com/cloudflare/terraform-provider-cloudflare/internal/acctest"
+	"github.com/cloudflare/terraform-provider-cloudflare/internal/utils"
+	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
+)
+
+func TestAccCloudflareTunnelDatasource_Basic(t *testing.T) {
+	if os.Getenv("CLOUDFLARE_API_TOKEN") != "" {
+		t.Setenv("CLOUDFLARE_API_TOKEN", "")
+	}
+
+	accID := os.Getenv("CLOUDFLARE_ACCOUNT_ID")
+	rnd := utils.GenerateRandomResourceName()
+	name := fmt.Sprintf("data.cloudflare_zero_trust_tunnel_cloudflared_token.%s", rnd)
+
+	resource.Test(t, resource.TestCase{
+		PreCheck: func() {
+			acctest.TestAccPreCheck(t)
+		},
+		ProtoV6ProviderFactories: acctest.TestAccProtoV6ProviderFactories,
+		Steps: []resource.TestStep{
+			{
+				Config: testAccCheckCloudflareTunnelDatasourceBasic(accID, rnd),
+				Check: resource.ComposeTestCheckFunc(
+					resource.TestCheckResourceAttrSet(name, "token"),
+				),
+			},
+		},
+	})
+}
+
+func testAccCheckCloudflareTunnelDatasourceBasic(accID, name string) string {
+	return acctest.LoadTestCase("basic.tf", accID, name)
+}
