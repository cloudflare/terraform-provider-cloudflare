diff --git a/internal/services/list_item/data_source.go b/internal/services/list_item/data_source.go
index ad6d36c38..83fcf92d7 100644
--- a/internal/services/list_item/data_source.go
+++ b/internal/services/list_item/data_source.go
@@ -5,13 +5,8 @@ package list_item
 import (
 	"context"
 	"fmt"
-	"io"
-	"net/http"
 
 	"github.com/cloudflare/cloudflare-go/v4"
-	"github.com/cloudflare/cloudflare-go/v4/option"
-	"github.com/cloudflare/terraform-provider-cloudflare/internal/apijson"
-	"github.com/cloudflare/terraform-provider-cloudflare/internal/logging"
 	"github.com/hashicorp/terraform-plugin-framework/datasource"
 )
 
@@ -51,39 +46,39 @@ func (d *ListItemDataSource) Configure(ctx context.Context, req datasource.Confi
 func (d *ListItemDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
 	var data *ListItemDataSourceModel
 
-	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
-
-	if resp.Diagnostics.HasError() {
-		return
-	}
-
-	params, diags := data.toReadParams(ctx)
-	resp.Diagnostics.Append(diags...)
-	if resp.Diagnostics.HasError() {
-		return
-	}
-
-	res := new(http.Response)
-	env := ListItemResultDataSourceEnvelope{*data}
-	_, err := d.client.Rules.Lists.Items.Get(
-		ctx,
-		data.ListID.ValueString(),
-		data.ItemID.ValueString(),
-		params,
-		option.WithResponseBodyInto(&res),
-		option.WithMiddleware(logging.Middleware(ctx)),
-	)
-	if err != nil {
-		resp.Diagnostics.AddError("failed to make http request", err.Error())
-		return
-	}
-	bytes, _ := io.ReadAll(res.Body)
-	err = apijson.UnmarshalComputed(bytes, &env)
-	if err != nil {
-		resp.Diagnostics.AddError("failed to deserialize http request", err.Error())
-		return
-	}
-	data = &env.Result
+	// resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
+
+	// if resp.Diagnostics.HasError() {
+	// 	return
+	// }
+
+	// params, diags := data.toReadParams(ctx)
+	// resp.Diagnostics.Append(diags...)
+	// if resp.Diagnostics.HasError() {
+	// 	return
+	// }
+
+	// res := new(http.Response)
+	// env := ListItemResultDataSourceEnvelope{*data}
+	// _, err := d.client.Rules.Lists.Items.Get(
+	// 	ctx,
+	// 	data.ListID.ValueString(),
+	// 	data.ItemID.ValueString(),
+	// 	params,
+	// 	option.WithResponseBodyInto(&res),
+	// 	option.WithMiddleware(logging.Middleware(ctx)),
+	// )
+	// if err != nil {
+	// 	resp.Diagnostics.AddError("failed to make http request", err.Error())
+	// 	return
+	// }
+	// bytes, _ := io.ReadAll(res.Body)
+	// err = apijson.UnmarshalComputed(bytes, &env)
+	// if err != nil {
+	// 	resp.Diagnostics.AddError("failed to deserialize http request", err.Error())
+	// 	return
+	// }
+	// data = &env.Result
 
 	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
 }
