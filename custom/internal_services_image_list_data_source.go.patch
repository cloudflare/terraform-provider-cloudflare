diff --git a/internal/services/image/list_data_source.go b/internal/services/image/list_data_source.go
index d9d6fae41..675d9d31c 100644
--- a/internal/services/image/list_data_source.go
+++ b/internal/services/image/list_data_source.go
@@ -7,9 +7,6 @@ import (
 	"fmt"
 
 	"github.com/cloudflare/cloudflare-go/v4"
-	"github.com/cloudflare/terraform-provider-cloudflare/internal/apijson"
-	"github.com/cloudflare/terraform-provider-cloudflare/internal/customfield"
-	"github.com/hashicorp/terraform-plugin-framework/attr"
 	"github.com/hashicorp/terraform-plugin-framework/datasource"
 )
 
@@ -49,52 +46,52 @@ func (d *ImagesDataSource) Configure(ctx context.Context, req datasource.Configu
 func (d *ImagesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
 	var data *ImagesDataSourceModel
 
-	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
-
-	if resp.Diagnostics.HasError() {
-		return
-	}
-
-	params, diags := data.toListParams(ctx)
-	resp.Diagnostics.Append(diags...)
-	if resp.Diagnostics.HasError() {
-		return
-	}
-
-	env := ImagesItemsListDataSourceEnvelope{}
-	maxItems := int(data.MaxItems.ValueInt64())
-	acc := []attr.Value{}
-	if maxItems <= 0 {
-		maxItems = 1000
-	}
-	page, err := d.client.Images.V1.List(ctx, params)
-	if err != nil {
-		resp.Diagnostics.AddError("failed to make http request", err.Error())
-		return
-	}
-
-	for page != nil && len(page.Result.Items) > 0 {
-		bytes := []byte(page.JSON.RawJSON())
-		err = apijson.UnmarshalComputed(bytes, &env)
-		if err != nil {
-			resp.Diagnostics.AddError("failed to unmarshal http request", err.Error())
-			return
-		}
-		acc = append(acc, env.Items.Elements()...)
-		if len(acc) >= maxItems {
-			break
-		}
-		page, err = page.GetNextPage()
-		if err != nil {
-			resp.Diagnostics.AddError("failed to fetch next page", err.Error())
-			return
-		}
-	}
-
-	acc = acc[:min(len(acc), maxItems)]
-	result, diags := customfield.NewObjectListFromAttributes[ImagesResultDataSourceModel](ctx, acc)
-	resp.Diagnostics.Append(diags...)
-	data.Result = result
+	// resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
+
+	// if resp.Diagnostics.HasError() {
+	// 	return
+	// }
+
+	// params, diags := data.toListParams(ctx)
+	// resp.Diagnostics.Append(diags...)
+	// if resp.Diagnostics.HasError() {
+	// 	return
+	// }
+
+	// env := ImagesItemsListDataSourceEnvelope{}
+	// maxItems := int(data.MaxItems.ValueInt64())
+	// acc := []attr.Value{}
+	// if maxItems <= 0 {
+	// 	maxItems = 1000
+	// }
+	// page, err := d.client.Images.V1.List(ctx, params)
+	// if err != nil {
+	// 	resp.Diagnostics.AddError("failed to make http request", err.Error())
+	// 	return
+	// }
+
+	// for page != nil && len(page.Result.Items) > 0 {
+	// 	bytes := []byte(page.JSON.RawJSON())
+	// 	err = apijson.UnmarshalComputed(bytes, &env)
+	// 	if err != nil {
+	// 		resp.Diagnostics.AddError("failed to unmarshal http request", err.Error())
+	// 		return
+	// 	}
+	// 	acc = append(acc, env.Items.Elements()...)
+	// 	if len(acc) >= maxItems {
+	// 		break
+	// 	}
+	// 	page, err = page.GetNextPage()
+	// 	if err != nil {
+	// 		resp.Diagnostics.AddError("failed to fetch next page", err.Error())
+	// 		return
+	// 	}
+	// }
+
+	// acc = acc[:min(len(acc), maxItems)]
+	// result, diags := customfield.NewObjectListFromAttributes[ImagesResultDataSourceModel](ctx, acc)
+	// resp.Diagnostics.Append(diags...)
+	// data.Result = result
 
 	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
 }
